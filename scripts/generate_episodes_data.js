const fs = require('fs');
const path = require('path');

// Read and parse the CSV file
function parseCSV() {
    const csvPath = path.join(__dirname, '../data/export.csv');
    const csvContent = fs.readFileSync(csvPath, 'utf-8');
    
    console.log('CSV Content preview:');
    console.log(csvContent.split('\n').slice(0, 5).join('\n'));
    
    // Split into lines and remove the header
    const lines = csvContent.split('\n').slice(1);
    
    const episodes = {};
    
    lines.forEach((line, index) => {
        if (!line.trim()) return; // Skip empty lines
        
        // Parse CSV line (handling quoted fields that may contain commas)
        const fields = parseCSVLine(line);
        
        console.log(`Line ${index + 1}: Found ${fields.length} fields`);
        if (fields.length >= 3) {
            console.log(`  Title: ${fields[0]}`);
            console.log(`  Link: ${fields[1]}`);
            console.log(`  Episode: ${fields[2]}`);
        }
        
        if (fields.length >= 3) {
            const title = fields[0];
            const link = fields[1];
            const episodeNum = parseInt(fields[2]);
            
            if (!isNaN(episodeNum)) {
                episodes[episodeNum] = `<a href="${link}">${title}</a>`;
                console.log(`Added episode ${episodeNum}`);
            } else {
                console.log(`Failed to parse episode number: ${fields[2]}`);
            }
        }
    });
    
    return episodes;
}

// Simple CSV line parser that handles quoted fields
function parseCSVLine(line) {
    const fields = [];
    let current = '';
    let inQuotes = false;
    
    for (let i = 0; i < line.length; i++) {
        const char = line[i];
        
        if (char === '"') {
            if (inQuotes && line[i + 1] === '"') {
                // Escaped quote
                current += '"';
                i++; // Skip next quote
            } else {
                // Toggle quote state
                inQuotes = !inQuotes;
            }
        } else if (char === ',' && !inQuotes) {
            // Field separator
            fields.push(current);
            current = '';
        } else {
            current += char;
        }
    }
    
    // Add the last field
    fields.push(current);
    
    return fields;
}

// Generate the episodes array
function generateEpisodesArray() {
    const episodeData = parseCSV();
    
    console.log('Episode data keys:', Object.keys(episodeData).sort((a, b) => parseInt(a) - parseInt(b)));
    
    // Find the maximum episode number
    const maxEpisode = Math.max(...Object.keys(episodeData).map(Number));
    console.log('Max episode:', maxEpisode);
    
    // Create array with proper size (maxEpisode + 1 to include index 0)
    const episodes = new Array(maxEpisode + 1).fill('');
    
    // Set the welcome message at index 0
    episodes[0] = "start scrolling <3";
    
    // Fill in the episodes
    Object.keys(episodeData).forEach(episodeNum => {
        episodes[parseInt(episodeNum)] = episodeData[episodeNum];
    });
    
    return episodes;
}

// Write the generated data to a JavaScript file
function writeEpisodesFile() {
    const episodes = generateEpisodesArray();
    
    const jsContent = `// Auto-generated from data/export.csv
// Do not edit this file manually - run 'node scripts/generate_episodes_data.js' to regenerate

export const episodes = ${JSON.stringify(episodes, null, 2)};
`;
    
    const outputPath = path.join(__dirname, '../data/generatedEpisodes.js');
    
    // Ensure the data directory exists
    const dataDir = path.dirname(outputPath);
    if (!fs.existsSync(dataDir)) {
        fs.mkdirSync(dataDir, { recursive: true });
    }
    
    fs.writeFileSync(outputPath, jsContent);
    
    console.log(`‚úÖ Generated episodes data with ${episodes.length} entries`);
    console.log(`üìÅ Written to: ${outputPath}`);
    console.log(`üéØ Latest episode: #${episodes.length - 1}`);
    
    // Show the last few episodes for verification
    console.log('\nLast 5 episodes:');
    for (let i = Math.max(1, episodes.length - 5); i < episodes.length; i++) {
        if (episodes[i]) {
            console.log(`${i}: ${episodes[i]}`);
        }
    }
}

// Run the generation
try {
    writeEpisodesFile();
} catch (error) {
    console.error('‚ùå Error generating episodes data:', error.message);
    process.exit(1);
}